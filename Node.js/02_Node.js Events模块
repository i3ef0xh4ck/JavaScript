很多对象都会发出事件。比如，fs.readStream打开文件时会发出一个事件。所有发出事件的对象都是events.EventEmitter的实例，可以通过require("events");获得event模块。
通常，事件名采用“驼峰式”(即单词首字母大写，其他字母小写)命名方式，但是，不采用这种命名方式也不会造成程序功能上的问题。但为了程序风格的规范性和一致性，请尽量使用这种命名方式。
对象发出的事件需要有函数来捕获并处理。为此，需要先使一个事件与一个响应函数建立关系。对象发出事件时，与其建立关系的对应函数就会被执行。这些函数被称作监听器（listeners）。在监听器函数中，this指向发出该事件的EventEmitter对象。
2.1 events.EventEmitter类

通过require('events').EventEmitter得到EventEmitter类。
当EventEmitter对象遇到错误时，通常会触发error事件。error事件在Node.js中是一种特殊情况，如果没有监听器，那么默认会打印出栈跟踪器并退出程序。
2.2 添加监听器

为事件绑定事件处理程序，可以使用emitter.addListener(event, listener)和emitter.on(event, listener)，它们的作用是完全一样的。传入的参数是事件（event）和处理函数（listener）。
在虚拟机桌面新建文件test1.js，输入如下代码并保存：
var http = require('http');
var server = http.createServer();

// 为request事件绑定处理函数
// 也可以使用server.addListener
server.on('request', function(req, res) { //为`request`事件添加一个匿名listener函数
    res.writeHead(200, { 'Content-Type': 'text/plain' }); //写入http响应头
    res.write('shiyanlou'); //写入http响应体
    console.log('shiyanlou');
    res.end(); //结束，返回响应内容
});

server.listen(1337, '127.0.0.1'); // 在127.0.0.1(即本地回环)1337端口监听http请求
console.log('Server running at http://127.0.0.1:1337/');
运行代码：
$ cd Desktop
~/Desktop$ node test1.js
然后打开虚拟机桌面的Firefox浏览器，在地址栏输入127.0.0.1:1337，即可看到页面上打印出了“shiyanlou”字样，同时console界面也会输出'shiyanlou'字样。
2.3 只执行一次的监听器

使用emitter.once(event, listener)绑定的事件监听器只会执行一次，然后就会被删除掉。
在虚拟机桌面新建文件test2.js，输入如下代码并保存：
var http = require('http');
var server = http.createServer();

// 为request事件绑定处理函数，事件只会执行一次
server.once('request', function(req, res) {
    res.writeHead(200, { 'Content-Type': 'text/plain' });
    res.write('shiyanlou');
    console.log('shiyanlou');
    res.end();
});

server.listen(1337, '127.0.0.1');
console.log('Server running at http://127.0.0.1:1337/');
运行代码：
~/Desktop$ node test2.js
打开虚拟机桌面的Firefox浏览器，在地址栏输入127.0.0.1:1337，即可看到页面上打印出了“shiyanlou”字样，再次刷新此页面，就不会再显示，因为此事件只会执行一次。
2.4 移除监听器

移除监听器使用emitter.removeListener(event, listener)。
在虚拟机桌面新建文件test3.js，输入如下代码并保存：
var http = require('http');
var server = http.createServer();

function callback(req, res) {
    res.writeHead(200, { 'Content-Type': 'text/plain' });
    res.write('Hello World');
    console.log('Hello World');
    res.end();
}

server.on('request', callback);

// 移除绑定的监听器callback
server.removeListener('request', callback);

server.on('request', function(req, res) {
    res.writeHead(200, { 'Content-Type': 'text/plain' });
    res.write('shiyanlou');
    console.log('shiyanlou');
    res.end();
});

server.listen(1337, '127.0.0.1');
console.log('Server running at http://127.0.0.1:1337/');
运行代码：
~/Desktop$ node test3.js
打开虚拟机桌面的Firefox浏览器，在地址栏输入127.0.0.1:1337，即可看到页面上打印出了“shiyanlou”字样，为什么没有显示“Hello World”呢？因为显示“Hello World”的监听器被移除了。
2.5 移除所有监听器

移除所有监听器使用emitter.removeAllListeners([event])。
在虚拟机桌面新建文件test4.js，输入如下代码并保存：
var http = require('http');
var server = http.createServer();

server.on('request', function(req, res) {
    res.writeHead(200, { 'Content-Type': 'text/plain' });
    res.write('shiyanlou,111');
    console.log('shiyanlou,111');
    res.end();
});

server.on('request', function(req, res) {
    res.writeHead(200, { 'Content-Type': 'text/plain' });
    res.write('shiyanlou,222');
    console.log('shiyanlou,222');
    res.end();
});

// 移除绑定的所有监听器
server.removeAllListeners('request');

server.on('request', function(req, res) {
    res.writeHead(200, { 'Content-Type': 'text/plain' });
    res.write('shiyanlou');
    console.log('shiyanlou');
    res.end();
});

server.listen(1337, '127.0.0.1');
console.log('Server running at http://127.0.0.1:1337/');
运行代码：
~/Desktop$ node test4.js
打开虚拟机桌面的Firefox浏览器，在地址栏输入127.0.0.1:1337，即可看到页面上打印出了“shiyanlou”字样，说明前面的监听器被移除了，都没有执行，所以没有显示，同时console界面也只会输出'shiyanlou'字样。
2.6 设置监听器最大绑定数

emitter.setMaxListeners(n)可以设置同一事件的监听器最大绑定数，默认情况下，超过10个就会警告提示，这能帮我们快速找到内存泄露的地方。显然，不是所有的事件触发器都限制在10个监听器，通过这个方法可以设置，如果设置为0就是无限制。
2.7 自定义事件

使用emitter.emit(event, [arg1], [arg2], [...])可以触发自定义的事件。
在虚拟机桌面新建文件test5.js，输入如下代码并保存：
var http = require('http');
var server = http.createServer();

// 绑定自定义事件myevent
server.on('myevent', function(arg) {
    console.log(arg);
});

// 触发自定义事件
server.emit('myevent', 'shiyanlou');

server.listen(1337, '127.0.0.1');
console.log('Server running at http://127.0.0.1:1337/');
运行代码：
~/Desktop$ node test5.js
可以看到console界面输出了'shiyanlou'字样，说明触发自定义事件成功。
2.8 查看事件绑定的监听器个数

使用EventEmitter.listenerCount(emitter, event)可以查看事件监听器数量。
在虚拟机桌面新建文件test6.js，输入如下代码并保存：
var http = require('http');
var events = require('events'); // 加载events模块
var server = http.createServer();

server.on('request', function(req, res) {
    res.writeHead(200, { 'Content-Type': 'text/plain' });
    res.write('shiyanlou,111');
    console.log('shiyanlou,111');
});

server.on('request', function(req, res) {
    res.write('\nshiyanlou,222');
    console.log('shiyanlou,222');
    res.end();
});

server.listen(1337, '127.0.0.1');
console.log('Server running at http://127.0.0.1:1337/');

// 查看server绑定的'request'事件的监听器个数
var num = events.EventEmitter.listenerCount(server, 'request');
console.log(num);
运行代码：
~/Desktop$ node test6.js
可以看到console界面输出了数字“2”，因为server绑定了两个监听器到'request'事件。
